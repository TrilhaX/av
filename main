warn("[TEMPEST HUB] Loading Bypass")
wait(1)
warn("[TEMPEST HUB] Loading Ui")
wait(1)
local repo = "https://raw.githubusercontent.com/TrapstarKSSKSKSKKS/LinoriaLib/main/"

local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()
Library:Notify("Welcome to Tempest Hub", 5)

local Window = Library:CreateWindow({
	Title = "Tempest Hub | Anime Vanguards",
	Center = false,
	AutoShow = true,
	TabPadding = 8,
	MenuFadeTime = 0.2,
})

Library:Notify("Loading Anime Vanguards Script", 5)
warn("[TEMPEST HUB] Loading Function")
wait(1)
warn("[TEMPEST HUB] Loading Toggles")
wait(1)
warn("[TEMPEST HUB] Last Checking")
wait(1)

local TweenService = game:GetService("TweenService")
local speed = 50

function tweenModel(model, targetCFrame)
	if not model.PrimaryPart then
		warn("PrimaryPart is not set for the model")
		return
	end

	local duration = (model.PrimaryPart.Position - targetCFrame.Position).Magnitude / speed
	local info = TweenInfo.new(duration, Enum.EasingStyle.Linear)

	local cframeValue = Instance.new("CFrameValue")
	cframeValue.Value = model:GetPrimaryPartCFrame()

	cframeValue:GetPropertyChangedSignal("Value"):Connect(function()
		model:SetPrimaryPartCFrame(cframeValue.Value)
	end)

	local tween = TweenService:Create(cframeValue, info, {
		Value = targetCFrame,
	})

	tween:Play()
	tween.Completed:Connect(function()
		cframeValue:Destroy()
	end)

	return tween
end

function GetCFrame(obj, height, angle)
	local cframe = CFrame.new()

	if typeof(obj) == "Vector3" then
		cframe = CFrame.new(obj)
	elseif typeof(obj) == "table" then
		cframe = CFrame.new(unpack(obj))
	elseif typeof(obj) == "string" then
		local parts = {}
		for val in obj:gmatch("[^,]+") do
			table.insert(parts, tonumber(val))
		end
		if #parts >= 3 then
			cframe = CFrame.new(unpack(parts))
		end
	elseif typeof(obj) == "Instance" then
		if obj:IsA("Model") then
			local rootPart = obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChild("Torso")
			if rootPart then
				cframe = rootPart.CFrame
			end
		elseif obj:IsA("Part") then
			cframe = obj.CFrame
		end
	end

	if height then
		cframe = cframe + Vector3.new(0, height, 0)
	end
	if angle then
		cframe = cframe * CFrame.Angles(0, math.rad(angle), 0)
	end

	return cframe
end

function HidePlayer()
	local Player = game.Players.LocalPlayer
	local character = Player.Character
	local Tag = character.Torso.Tag
	local LevelPlayer = Player.PlayerGui.HUD.Main.Level.Level
	local Currencies = Player.PlayerGui.HUD.Main.Currencies
	local Gold = Currencies.Coins
	local Gems = Currencies.Gems
	local Units = game:GetService("Players").LocalPlayer.PlayerGui.HUD.Main.Units
	local UnitsFolder = workspace.PetFolder
	local blacklist = {
		"UIAspectRatioConstraint",
		"UIListLayout",
		"Highlight",
	}

	for i, v in pairs(Units:GetChildren()) do
		if not table.find(blacklist, v.ClassName) then
			local imageHolder = v:FindFirstChild("UnitTemplate")
			if imageHolder and imageHolder:FindFirstChild("Holder") and imageHolder.Holder:FindFirstChild("Main") then
				local unitImage = imageHolder.Holder.Main:FindFirstChild("UnitImage")
				if unitImage and unitImage.Image ~= "" then
					unitImage:Destroy()
					imageHolder.Holder.Main.Price:Destroy()
					imageHolder.Holder.Main.LevelFrame:Destroy()
					LevelPlayer:Destroy()
					Gold.Coins.Text = "9999999999999"
					Gems.Gems.Text = "9999999999999"
					Tag:Destroy()
					print("Hide Player Actived")
					for J, K in pairs(UnitsFolder:GetChildren()) do
						if not table.find(blacklist, v.ClassName) then
							K:Destroy()
						end
					end
				else
					wait(1)
				end
			end
		end
		wait()
	end
end

function securityMode()
    print("Security Mode Actived")
    local players = game:GetService("Players")

    if #players:GetPlayers() >= 2 then
        local player1 = players:GetPlayers()[1]
        local targetPlaceId = 16146832113

        if game.PlaceId ~= targetPlaceId then
            game:GetService("TeleportService"):Teleport(targetPlaceId, player1)
        end
    end
end

function joinLobby()
    while getgenv().joinLobby == true do
	    local blacklist = {
		    "Misc",
		    "Invisible",
	    }
	    local mapas = game:GetService("ReplicatedStorage").Assets.Models.Enemies

	    for i, v in pairs(mapas:GetChildren()) do
		    if not table.find(blacklist, v.name) then
			    print(v.name)
			    local args = {
				    [1] = "Enter",
				    [2] = workspace.MainLobby.Lobby.Lobby,
			    }

			    game:GetService("ReplicatedStorage").Networking.LobbyEvent:FireServer(unpack(args))
                wait(1)
			    local args = {
				    [1] = "Confirm",
				    [2] = {
					    [1] = 'Story',
					    [2] = stagioLobby,
    					[3] = actLobby,
	    				[4] = difficultyLobby,
		    			[5] = 4,
			    		[6] = 0,
				    	[7] = false,
    				},
	    		}

		    	game:GetService("ReplicatedStorage").Networking.LobbyEvent:FireServer(unpack(args))
                wait(1)
                local args = {
                    [1] = "Start"
                }
                
                game:GetService("ReplicatedStorage").Networking.LobbyEvent:FireServer(unpack(args))
		    end
    	end
    wait(1)
    end
end

function leave()
    while getgenv().leave == true do
        local args = {
            [1] = "Lobby"
        }
        
        game:GetService("ReplicatedStorage").Networking.TeleportEvent:FireServer(unpack(args))
        wait(1)
    end
end

function replay()
    while getgenv().replay == true do
        local args = {
            [1] = "Replay"
        }
        
        game:GetService("ReplicatedStorage").Networking.TeleportEvent:FireServer(unpack(args))
        wait(1)
    end
end

function autoNext()
    while getgenv().autoNext == true do
        local args = {
            [1] = "Next"
        }
        
        game:GetService("ReplicatedStorage").Networking.TeleportEvent:FireServer(unpack(args))
        wait(1)
    end
end

function SkipWave()
    while getgenv().SkipWave == true do
        local args = {
            [1] = "Skip"
        }

        game:GetService("ReplicatedStorage").Networking.SkipWaveEvent:FireServer(unpack(args))
        wait(1)
    end
end

local ValuesGamemode = {}
local ValuesStagios = {}
local ValuesAct = {}
local ValuesDifficulty = {}

local Stages = game:GetService("ReplicatedStorage").Modules.Data.StagesData.Story
local printedNames = {}

for _, stage in pairs(Stages:GetChildren()) do
    table.insert(ValuesStagios, stage.Name)
    for _, childContainer in pairs(stage:GetChildren()) do
        if childContainer:IsA("Folder") or childContainer:IsA("Model") then
            for _, act in pairs(childContainer:GetChildren()) do
                if not printedNames[act.Name] then
                    table.insert(ValuesAct, act.Name)
                    printedNames[act.Name] = true
                end
            end
        end
    end
end

local Tabs = {
    Main = Window:AddTab('Main'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Player')

LeftGroupBox:AddToggle('AutoJoinMap', {
    Text = 'Hide Player',
    Default = false,
    Callback = function(Value)
        getgenv().HidePlayer = Value
        HidePlayer()
    end
})

LeftGroupBox:AddToggle('AutoJoinMap', {
    Text = 'Security Mode',
    Default = false,
    Callback = function(Value)
        getgenv().securityMode = Value
        securityMode()
    end
})

LeftGroupBox:AddToggle('AutoJoinMap', {
    Text = 'Auto Leave',
    Default = false,
    Callback = function(Value)
        getgenv().leave = Value
        leave()
    end
})

LeftGroupBox:AddToggle('AutoJoinMap', {
    Text = 'Auto Replay',
    Default = false,
    Callback = function(Value)
        getgenv().replay = Value
        replay()
    end
})

LeftGroupBox:AddToggle('AutoJoinMap', {
    Text = 'Auto Next',
    Default = false,
    Callback = function(Value)
        getgenv().autoNext = Value
        autoNext()
    end
})

local RightGroupBox = Tabs.Main:AddRightGroupbox('Auto Enter')

RightGroupBox:AddDropdown('VS', {
    Values = ValuesStagios,
    Default = "None",
    Multi = false,
    Text = 'Choose Stage',
    Callback = function(value)
        stageLobby = value
    end
})

RightGroupBox:AddDropdown('VA', {
    Values = ValuesAct,
    Default = "None",
    Multi = false,
    Text = 'Choose Act',
    Callback = function(value)
        actLobby = value
    end
})

RightGroupBox:AddDropdown('VD', {
    Values = {'Normal', 'Nightmare'},
    Default = "None",
    Multi = false,
    Text = 'Choose Difficulty',
    Callback = function(value)
        difficultyLobby = value
    end
})

RightGroupBox:AddToggle('AutoJoinMap', {
    Text = 'Auto Join Map',
    Default = false,
    Callback = function(Value)
        getgenv().joinLobby = Value
        joinLobby()
    end
})

local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60

local WatermarkConnection

-- Create a function to update FPS and ping information
local function UpdateWatermark()
	FrameCounter = FrameCounter + 1

	if (tick() - FrameTimer) >= 1 then
		FPS = FrameCounter
		FrameTimer = tick()
		FrameCounter = 0
	end

	Library:SetWatermark(
		("Tempest Hub | %s fps | %s ms"):format(
			math.floor(FPS),
			math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
		)
	)
end

-- Connect the function to the RenderStepped event
WatermarkConnection = game:GetService("RunService").RenderStepped:Connect(UpdateWatermark)

-- Create tabs for UI settings
local TabsUI = {
	["UI Settings"] = Window:AddTab("UI Settings"),
}

-- Unload function
local function Unload()
	WatermarkConnection:Disconnect()
	print("Unloaded!")
	Library.Unloaded = true
end

-- UI Settings
local MenuGroup = TabsUI["UI Settings"]:AddLeftGroupbox("Menu")

-- Add an unload button
MenuGroup:AddButton("Unload", Unload)

-- Add a label and key picker for the menu keybind
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "End", NoUI = true, Text = "Menu keybind" })

-- Define the ToggleKeybind variable
Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

ThemeManager:SetFolder("Tempest Hub")
SaveManager:SetFolder("Tempest Hub/_AV_")

SaveManager:BuildConfigSection(TabsUI["UI Settings"])

ThemeManager:ApplyToTab(TabsUI["UI Settings"])

SaveManager:LoadAutoloadConfig()

local GameConfigName = "_AV_"
local player = game.Players.LocalPlayer
SaveManager:Load(player.Name .. GameConfigName)
spawn(function()
	while task.wait(1) do
		if Library.Unloaded then
			break
		end
		SaveManager:Save(player.Name .. GameConfigName)
	end
end)

-- Disable player idling
for i, v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
	v:Disable()
end
warn("[TEMPEST HUB] Loaded")
